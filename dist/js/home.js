const editarPublicacion = e => { $(`#publicacionForm-${e}`).toggle(), $(`#publicacionContenido-${e}`).toggle() }, cargarImagen = e => { $(`#publicacionForm-${e} input`).trigger("click") }, previsualizacionImagenTest = e => { const a = $(`#publicacionForm-${e} input[type="file"]`), o = a[0].files; if (o) { if (o[0].size > 1e5) return alert("La imagen es demasiado grande. Por favor, selecciona una imagen m치s peque침a."), a.val(""), void $(`#previsualizacionImagen-${e}`).css("display", "none"); $(`#previsualizacionImagen-${e}`).css("display", "block").attr("src", URL.createObjectURL(o[0])) } }, mostrarCajaComentarios = e => { $(`[data-lista-comentarios|='${e}']`).toggle(), obtenerComentarios(e) }, reaccionarPublicacion = e => { const a = new Number(e.target.getAttribute("data-id")), o = e.target.name; $(`[data-dropdown-toggle|='reacciones-${a}']`).html(reacciones[o]); const t = { userId: getUserAuth().id, postId: a, type: o, fecha: (new Date).getTime() }; $.ajax({ url: BASE_URL + "/reactions", method: "POST", data: JSON.stringify(t), contentType: "application/json", success: e => { obtenerPublicaciones() }, error: e => { console.error("Error al reaccionar:", e) } }) }, base64 = e => new Promise(((a, o) => { if ("" !== e.name) { const o = new FileReader; o.onload = function (e) { const o = e.target.result; a(o) }, o.readAsDataURL(e) } else a("") })), editarPublicacionAJAX = async e => { e.preventDefault(); const a = new FormData(e.target), o = Object.fromEntries(new FormData(e.target).entries()), t = a.get("imagen"); "" === t.name ? (o.imagen = o.imagenOriginal, delete o.imagenOriginal) : o.imagen = await base64(t), o.id = Number(o.id), o.userId = Number(o.userId), o.fecha = Number(o.fecha), $.ajax({ url: BASE_URL + "/posts/" + o.id, method: "PUT", data: JSON.stringify(o), contentType: "application/json", success: e => { $("#publicacionForm").trigger("reset"), showToast("Se ha editado el post con exito", "success", (() => { })), obtenerPublicaciones() }, error: e => { console.error("Error al crear la publicaci칩n:", e) } }) }, obtenerComentarios = e => { $.ajax({ url: BASE_URL + `/comments?postId=${e}&_expand=user`, method: "GET", dataType: "json", success: a => { console.log(a), $(`#lista-comentarios-${e}`).html(""), a.forEach((a => { $(`#lista-comentarios-${e}`).append(comentarioComponent(a)) })) }, error: e => { alert("HUBO UN ERROR AL CARGAR LLOS COMENTARIOS") } }) }, obtenerPublicaciones = () => { $.ajax({ url: BASE_URL + "/posts?_sort=fecha&_order=desc&_embed=comments&_embed=reactions&_expand=user", method: "GET", dataType: "json", success: e => { $("#publicaciones").html(""), e.forEach((e => { const a = e.reactions.length, o = e.comments.length, t = JSON.parse(localStorage.getItem("usuario")); e.reactions.sort(((e, a) => a.fecha - e.fecha)); const r = e.reactions.find((e => e.userId === t.id))?.type; $("#publicaciones").append(publicacionComponent({ ...e, reacciones: a, comentarios: o, reaccion: r })) })), dropwDownListener(), modalImanges() }, error: e => { alert("HUBO UN ERROR AL CARGAR LAS PUBLICACIONES") } }) }, nuevaPublicacion = async e => { e.preventDefault(); const a = new FormData(e.target), o = Object.fromEntries(new FormData(e.target).entries()), t = a.get("imagen"); o.imagen = await base64(t); const r = { ...o, fecha: (new Date).getTime(), userId: getUserAuth().id }; $.ajax({ url: BASE_URL + "/posts", method: "POST", data: JSON.stringify(r), contentType: "application/json", success: e => { console.log(e), $("#publicacionForm").trigger("reset"), showToast("Se ha publicado el post con exito", "success", (() => { })), obtenerPublicaciones() }, error: e => { console.error("Error al crear la publicaci칩n:", e) } }) }, nuevoComentario = e => { e.preventDefault(); const a = Object.fromEntries(new FormData(e.target).entries()); a.postId = Number(a.postId), a.userId = Number(a.userId), a.fecha = (new Date).getTime(), $.ajax({ url: BASE_URL + "/comments", method: "POST", data: JSON.stringify(a), contentType: "application/json", success: e => { showToast("Se ha comentado con exito", "success", (() => { })), $(`#formularioComentario-${a.postId}`).trigger("reset"), obtenerComentarios(a.postId) }, error: e => { alert("Error al crear el comentario: " + JSON.stringify(e)) } }) }, modalImanges = () => { $(".modal-img").on("click", (e => { const a = $(e.target).attr("src"); $(".modal-imagen").attr("src", a), $(".modal").css("display", "flex"), $(".modal").fadeIn() })), $(".modal").on("click", (() => { $(".modal").fadeOut() })), $(".modal-contenido").on("click", (e => { e.stopPropagation() })) }, dropwDownListener = () => { $('[data-dropdown-toggle^="reacciones-"]').each((function (e, a) { const o = $(`#${a.getAttribute("data-dropdown-toggle")}`)[0]; new Dropdown(o, this, { placement: "top", triggerType: "hover", offsetSkidding: 0, offsetDistance: 10, delay: 300, ignoreClickOutsideClass: !1 }) })) }; $((() => { $("#formNuevaPublicacion").append(publicacionForm()), obtenerPublicaciones() }));