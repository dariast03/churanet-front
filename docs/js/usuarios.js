const obtenerUsuarios = (e = "") => { $.ajax({ url: BASE_URL + `/users?_sort=id&_order=desc&_embed=profiles&q=${e}`, method: "GET", dataType: "json", success: e => { $("#usuarios").html(""); let o = []; localStorage.getItem("usuariosBloqueados") && (o = JSON.parse(localStorage.usuariosBloqueados) || []); let t = 0; e.forEach((e => { o.includes(e.id) || e.id == getUserAuth().id || ($("#usuarios").append(usuarioCardComponent(e)), t++) })), 0 == t && $("#usuarios").html("<h1>NO HAY USUARIOS </h1>"), dropwDownListener() }, error: function (e) { alert("HUBO UN ERROR AL CARGAR LAS PUBLICACIONES") } }) }, nuevaPublicacion = async e => { e.preventDefault(); const o = new FormData(e.target), t = Object.fromEntries(new FormData(e.target).entries()), s = o.get("imagen"); t.imagen = await base64(s); const r = { ...t, fecha: (new Date).getTime(), userId: getUserAuth().id }; $.ajax({ url: BASE_URL + "/posts", method: "POST", data: JSON.stringify(r), contentType: "application/json", success: e => { $("#publicacionForm").trigger("reset"), showToast("Se ha publicado el post con exito", "success", (() => { })), obtenerPublicaciones() }, error: e => { console.error("Error al crear la publicaciÃ³n:", e) } }) }, dropwDownListener = () => { $('[data-dropdown-toggle^="dropdown-"]').each((function (e, o) { const t = $(`#${o.getAttribute("data-dropdown-toggle")}`)[0]; new Dropdown(t, this, { placement: "bottom", triggerType: "hover", offsetSkidding: 0, offsetDistance: 10, delay: 300, ignoreClickOutsideClass: !1 }) })) }, bloquearUsuario = e => { const o = JSON.parse(localStorage.getItem("usuariosBloqueados")) || []; o.includes(e) || (o.push(e), localStorage.setItem("usuariosBloqueados", JSON.stringify(o)), obtenerUsuarios()) }; $((() => { obtenerUsuarios(), $("#buscar-usuarios").on("input", (e => { obtenerUsuarios(e.target.value) })) }));